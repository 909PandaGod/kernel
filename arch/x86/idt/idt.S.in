.text

.global idt_handler_entries
.global idt_entry_start
.global idt_entry_end

idt_common:
    cld
    pushq %rax
    pushq %rbx
    movq 0x10(%rsp), %rax

    swapgs

    movq %gs:0, %rbx
    movq (%rbx), %rbx
    
    // save the other registers
    movq %rcx, (0x28 + 0x8 * 2)(%rbx)
    // use cx to save ax
    popq %rcx
    movq %rcx, (0x28 + 0x8 * 1)(%rbx)
    popq %rcx
    movq %rcx, (0x28 + 0x8 * 0)(%rbx) 
    movq %rdx, (0x28 + 0x8 * 3)(%rbx)
    movq %rsi, (0x28 + 0x8 * 4)(%rbx)
    movq %rdi, (0x28 + 0x8 * 5)(%rbx)
    movq %r8, (0x28 + 0x8 * 6)(%rbx)
    movq %r9, (0x28 + 0x8 * 7)(%rbx)
    movq %r10, (0x28 + 0x8 * 8)(%rbx)
    movq %r11, (0x28 + 0x8 * 9)(%rbx)
    movq %r12, (0x28 + 0x8 * 10)(%rbx)
    movq %r13, (0x28 + 0x8 * 11)(%rbx)
    movq %r14, (0x28 + 0x8 * 12)(%rbx)
    movq %r15, (0x28 + 0x8 * 13)(%rbx)
    movq %rbp, (0x28 + 0x8 * 14)(%rbx)

    movq (%rbp), %rcx
    movq %rcx, 0x20(%rbx)

    movq 0x8(%rbp), %rcx
    movq %rcx, 0x18(%rbx)

    movq 0x10(%rbp), %rcx
    movq %rcx, 0x10(%rbx)

    movq 0x18(%rbp), %rcx
    movq %rcx, 0x8(%rbx)

    movq 0x20(%rbp), %rcx
    movq %rcx, 0(%rbx)

    // setup stack frame
    pushq %rbp
    movq %rsp, %rbp

    // parameters
    movq %rax, %rsi
    movq %rbp, %rdi
    call *idt_handler_entries(%rax)1

    popq %rbp
    popq %r15
    popq %r14
    popq %r13
    popq %r12
    popq %r11
    popq %r10
    popq %r9
    popq %r8
    popq %rdi
    popq %rsi
    popq %rdx
    popq %rcx
    popq %rbx
    popq %rax
    subq $0x18, %rsp
    iretq

.align 0x10
idt_entry_start:
