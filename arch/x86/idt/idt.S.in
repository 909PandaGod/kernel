.text

.global idt_entry_start
.global idt_entry_end

idt_common:
    cld
    pushq %rax
    pushq %rbx

    xorq %rbx, %rbx
    cmp 0x48(%rsp), %rbx
    jne .L0
    swapgs
.L0:

    movq %gs:0, %rbx
    movq (%rbx), %rbx
    
    // save rcx to use for storing other values
    movq %rcx, (0x28 + 0x8 * 2)(%rbx)
    
    // save the top of the stack (%rbx)
    popq %rcx
    movq %rcx, (0x28 + 0x8 * 1)(%rbx)

    // save the top of the stack (is now %rax)
    popq %rcx
    movq %rcx, (0x28 + 0x8 * 0)(%rbx) 

    // save rdx-r15 and rbp
    movq %rdx, (0x28 + 0x8 * 3)(%rbx)
    movq %rsi, (0x28 + 0x8 * 4)(%rbx)
    movq %rdi, (0x28 + 0x8 * 5)(%rbx)
    movq %r8, (0x28 + 0x8 * 6)(%rbx)
    movq %r9, (0x28 + 0x8 * 7)(%rbx)
    movq %r10, (0x28 + 0x8 * 8)(%rbx)
    movq %r11, (0x28 + 0x8 * 9)(%rbx)
    movq %r12, (0x28 + 0x8 * 10)(%rbx)
    movq %r13, (0x28 + 0x8 * 11)(%rbx)
    movq %r14, (0x28 + 0x8 * 12)(%rbx)
    movq %r15, (0x28 + 0x8 * 13)(%rbx)
    movq %rbp, (0x28 + 0x8 * 14)(%rbx)
 
    // setup arguments argument 0 (int number)
    popq %rdi
    popq %rsi

    // save rip
    movq (%rsp), %rcx
    movq %rcx, (%rbx)

    movq 0x8(%rsp), %rcx
    movq %rcx, 0x8(%rbx)

    movq 0x10(%rsp), %rcx
    movq %rcx, 0x10(%rbx)

    movq 0x18(%rsp), %rcx
    movq %rcx, 0x18(%rbx)

    movq 0x20(%rsp), %rcx
    movq %rcx, 0x20(%rbx)

    // setup stack frame
    andq $~0x7, %rsp
    movq %rsp, %rbp

    // do gs stuff
    movq %gs:0, %rax
    movq 8(%rax), %rax
    movq (%rax,%rdi,8), %rax

    subq $0, %rax
    je .L1
    // idt_handler_entries[%rax](intno, errno)
    call *%rax
.L1:

    movq %gs:0, %rax
    movq (%rax), %rax

    // load the things on the stack
    movq (%rax), %rbx
    movq %rbx, (%rsp)

    movq 0x8(%rax), %rbx
    movq %rbx, 0x8(%rsp)

    movq 0x10(%rax), %rbx
    movq %rbx, 0x10(%rsp)

    movq 0x18(%rax), %rbx
    movq %rbx, 0x18(%rsp)

    movq 0x20(%rax), %rbx
    movq %rbx, 0x20(%rsp)

    movq (0x28 + 0x8 * 1)(%rax), %rbx
    movq (0x28 + 0x8 * 2)(%rax), %rcx
    movq (0x28 + 0x8 * 3)(%rax), %rdx
    movq (0x28 + 0x8 * 4)(%rax), %rsi
    movq (0x28 + 0x8 * 5)(%rax), %rdi
    movq (0x28 + 0x8 * 6)(%rax), %r8
    movq (0x28 + 0x8 * 7)(%rax), %r9
    movq (0x28 + 0x8 * 8)(%rax), %r10
    movq (0x28 + 0x8 * 9)(%rax), %r11
    movq (0x28 + 0x8 * 10)(%rax), %r12
    movq (0x28 + 0x8 * 11)(%rax), %r13
    movq (0x28 + 0x8 * 12)(%rax), %r14
    movq (0x28 + 0x8 * 13)(%rax), %r15
    movq (0x28 + 0x8 * 14)(%rax), %rbp
    movq (0x28 + 0x8 + 0)(%rax), %rax

    iretq

.align 0x10
idt_entry_start:
