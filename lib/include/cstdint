// vim: set ft=cpp:
#pragma once

namespace std::detail
{
    template <int size, typename T, typename... Ts>
    auto select_integral()
    {
        if constexpr (sizeof(T) == size)
        {
            return T{};
        }
        else
        {
            static_assert(sizeof...(Ts) != 0, "Unable to find proper type for stdint");
            return select_integral<size, Ts...>();
        }
    }

    template <int size>
    using int_select_t = decltype(select_integral<size, signed char, short, int, long, long long>());

    template <int size>
    using uint_select_t = decltype(select_integral<size, unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>());

    template <int size>
    inline constexpr __INTMAX_TYPE__ intmax_of = (1ULL << (size * 8 - 1)) - 1;
} // namespace std::detail

namespace std
{
    using int8_t = std::detail::int_select_t<1>;
    using uint8_t = std::detail::uint_select_t<1>;
    using int16_t = std::detail::int_select_t<2>;
    using uint16_t = std::detail::uint_select_t<2>;
    using int32_t = std::detail::int_select_t<4>;
    using uint32_t = std::detail::uint_select_t<4>;
    using int64_t = std::detail::int_select_t<8>;
    using uint64_t = std::detail::uint_select_t<8>;

    using int_least8_t = int8_t;
    using uint_least8_t = uint8_t;
    using int_least16_t = int16_t;
    using uint_least16_t = uint16_t;
    using int_least32_t = int32_t;
    using uint_least32_t = uint32_t;
    using int_least64_t = int64_t;
    using uint_least64_t = uint64_t;
    using intmax_t = __INTMAX_TYPE__;
    using uintmax_t = __UINTMAX_TYPE__;
    using intptr_t = std::detail::int_select_t<sizeof(void*)>;
    using uintptr_t = std::detail::uint_select_t<sizeof(void*)>;

    inline constexpr auto INT8_MAX = 127;
    inline constexpr auto INT16_MAX = 32767;
    inline constexpr auto INT32_MAX = 2147483647;
    inline constexpr auto INT64_MAX = 9223372036854775807L;

    inline constexpr auto INT8_MIN = -128;
    inline constexpr auto INT16_MIN = -32768;
    inline constexpr auto INT32_MIN = -2147483648;
    inline constexpr auto INT64_MIN = (-9223372036854775807L - 1);

    inline constexpr auto INT_LEAST8_MAX = 127;
    inline constexpr auto INT_LEAST16_MAX = 32767;
    inline constexpr auto INT_LEAST32_MAX = 2147483647;
    inline constexpr auto INT_LEAST64_MAX = (-9223372036854775807L - 1);

    inline constexpr auto INT_LEAST8_MIN = -128;
    inline constexpr auto INT_LEAST16_MIN = -32768;
    inline constexpr auto INT_LEAST32_MIN = -2147483648;
    inline constexpr auto INT_LEAST64_MIN = (-9223372036854775807L - 1);

    inline constexpr auto UINT8_MAX = 255;
    inline constexpr auto UINT16_MAX = 65535;
    inline constexpr auto UINT32_MAX = 4294967295;
    inline constexpr auto UINT64_MAX = 18446744073709551615UL;

    inline constexpr auto UINT_FAST8_MAX = 4294967295;
    inline constexpr auto UINT_FAST16_MAX = 4294967295;
    inline constexpr auto UINT_FAST32_MAX = 4294967295;
    inline constexpr auto UINT_FAST64_MAX = 18446744073709551615UL;

#if defined(__x86_64__)
    using int_fast8_t = int32_t;
    using uint_fast8_t = uint32_t;
    using int_fast16_t = int32_t;
    using uint_fast16_t = uint32_t;
    using int_fast32_t = int32_t;
    using uint_fast32_t = uint32_t;
    using int_fast64_t = int64_t;
    using uint_fast64_t = uint64_t;

    inline constexpr auto INT_FAST8_MAX = 2147483647;
    inline constexpr auto INT_FAST16_MAX = 2147483647;
    inline constexpr auto INT_FAST32_MAX = 2147483647;
    inline constexpr auto INT_FAST64_MAX = 9223372036854775807;

    inline constexpr auto INT_FAST8_MIN = -2147483648;
    inline constexpr auto INT_FAST16_MIN = -2147483648;
    inline constexpr auto INT_FAST32_MIN = -2147483648;
    inline constexpr auto INT_FAST64_MIN = (-9223372036854775807L - 1);
#endif

    inline constexpr auto INTPTR_MAX = detail::intmax_of<sizeof(intptr_t)>;
    inline constexpr auto INTMAX_MAX = detail::intmax_of<sizeof(intmax_t)>;
} // namespace std
