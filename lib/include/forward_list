// vim: set ft=cpp:
#pragma once
#include "cstddef"
#include "initializer_list"
#include "iterator"

namespace std
{
    template <typename T>
    class forward_list
    {
        struct _data
        {
            _data* next;
            T value;

            _data() : next(nullptr), value() {}
            _data(T&& val) : next(nullptr), value(forward(val)) {}

            template <typename... Args>
            _data(Args&&... args) : next(nullptr), value(forward(args)...)
            {
            }
        };

        class iterator
        {
            friend forward_list;
            _data* val;

        public:
            using value_type = T;
            using pointer = T*;
            using reference = T&;
            using difference_type = ptrdiff_t;
            using iterator_category = forward_iterator_tag;

            iterator() noexcept : val() {}
            explicit iterator(_data* ptr) noexcept : val(ptr) {}

            [[nodiscard]] auto operator*() const noexcept -> reference { return val->value; }

            [[nodiscard]] auto operator->() const noexcept -> pointer { return &val->value; }

            auto operator++() noexcept -> iterator&
            {
                val = val->next;
                return *this;
            }

            iterator operator++(int) noexcept
            {
                auto _tmp(*this);
                val = val->next;
                return _tmp;
            }

            [[nodiscard]] friend auto operator==(const iterator& x, const iterator& y) noexcept -> bool { return x.val == y.val; }

            [[nodiscard]] friend auto operator!=(const iterator& x, const iterator& y) noexcept -> bool { return x.val != y.val; }

            auto next() const noexcept -> iterator
            {
                if (val)
                {
                    return iterator(val->next);
                }
                return iterator(nullptr);
            }
        };

        class const_iterator
        {
            friend forward_list;
            _data* val;

        public:
            using value_type = T;
            using pointer = const T*;
            using reference = const T&;
            using difference_type = ptrdiff_t;
            using iterator_category = forward_iterator_tag;

            const_iterator() noexcept : val() {}

            explicit const_iterator(const _data* _n) noexcept : val(_n) {}

            const_iterator(const iterator& _iter) noexcept : val(_iter.val) {}

            [[nodiscard]] auto operator*() const noexcept -> reference { return this->val->value; }

            [[nodiscard]] auto operator->() const noexcept -> pointer { return &this->val->value; }

            auto operator++() noexcept -> iterator&
            {
                val = val->next;
                return *this;
            }

            const iterator operator++(int) noexcept
            {
                auto _tmp(*this);
                val = val->next;
                return _tmp;
            }

            [[nodiscard]] friend auto operator==(const const_iterator& _x, const const_iterator& _y) noexcept -> bool { return _x.val == _y.val; }

            [[nodiscard]] friend auto operator!=(const const_iterator& _x, const const_iterator& _y) noexcept -> bool { return _x.val != _y.val; }

            auto next() const noexcept -> const_iterator
            {
                if (this->val) {
                    return const_iterator(val->next);
                }                      return const_iterator(nullptr);
            }
        };

        _data* start;
        _data* end_element;
        size_t s{};

    public:
        using value_type = T;
        using size_type = size_t;
        using difference_type = ptrdiff_t;
        using reference = T&;
        using const_reference = const T&;
        using pointer = T*;
        using const_pointer = const T*;

        constexpr forward_list() : s(0), start(nullptr) {}
        forward_list(size_type count, const T& value) { assign(count, value); }

        explicit forward_list(size_type count) : s(count)
        {
            start = end_element = nullptr;
            auto* curr = (_data*)&start;
            
            while (count--)
            {
                end_element = curr->next = new _data();
                curr = curr->next;
            }
        }

        template <typename It>
        forward_list(It first, It last)
        {
            assign(first, last);
        };

        forward_list(const forward_list& other) : forward_list(other.begin(), other.end()) {}
        forward_list(forward_list&& other)
 noexcept : start(other.start), s(other.s)         {
            
            
            other.s = 0;
            other.s = nullptr;
        }

        forward_list(initializer_list<T> init) : forward_list(init.begin(), init.end()) {}

        auto operator=(const forward_list& other) -> forward_list&
        {
            assign(other.begin(), other.end());
            return *this;
        }

        auto operator=(forward_list&& other) -> forward_list&
        {
            s = other.s;
            start = other.start;
            other.s = 0;
            other.start = nullptr;
            return *this;
        }
        auto operator=(initializer_list<T> il) -> forward_list&
        {
            assign(il);
            return *this;
        }

        ~forward_list() { clear(); }

        void assign(size_type count, const T& value)
        {
            clear();
            auto* curr = (_data*)&start;
            s = count;
            while (count--)
            {
                end_element = curr->next = new _data(value);
                curr = curr->next;
            }
        }

        template <class It>
        void assign(It first, It last)
        {
            clear();
            auto* curr = (_data*)&start;
            while (first != last)
            {
                end_element = curr->next = new _data(*first);
                curr = curr->next;
                first++;
                s++;
            }
        }

        void assign(initializer_list<T> il) { assign(il.begin(), il.end()); }

        auto front() -> reference { return start->value; }
        auto front() const -> const_reference { return start->value; }

        auto before_begin() noexcept -> iterator { return iterator((_data*)&start); }
        auto before_begin() const noexcept -> const_iterator { return const_iterator((_data*)&start); }
        auto cbefore_begin() const noexcept -> const_iterator { return const_iterator((_data*)&start); }

        auto begin() noexcept -> iterator { return iterator(start); }
        auto begin() const noexcept -> const_iterator { return const_iterator(start); }
        auto cbegin() const noexcept -> const_iterator { return const_iterator(start); }

        auto end() noexcept -> iterator { return iterator(end_element); }
        auto end() const noexcept -> const_iterator { return const_iterator(end_element); }
        auto cend() const noexcept -> const_iterator { return const_iterator(end_element); }

        [[nodiscard]] auto empty() const noexcept -> bool { return s == 0; }
        [[nodiscard]] size_type max_size() const noexcept { return (size_type)-1; }

        void clear()
        {
            s = 0;
            end_element = nullptr;
            while (start)
            {
                _data* tmp = start;
                start = start->next;
                delete tmp;
            }
        }

        auto insert_after(const_iterator pos, const T& value) -> iterator
        {
            s++;
            auto newval = pos.val;
            pos.val = new _data(value);
            pos.val->next = newval;
            return iterator(pos.next().val);
        }

        auto insert_after(const_iterator pos, T&& value) -> iterator
        {
            s++;
            auto newval = pos.val;
            pos.val = new _data(value);
            pos.val->next = newval;
            return iterator(pos.val->next);
        }

        auto insert_after(const_iterator pos, size_type count, const T& value) -> iterator
        {
            s += count;
            while (count--) {
                insert_after(pos, value);
}

            return iterator(pos.val->next);
        }

        template <typename It>
        auto insert_after(const_iterator pos, It first, It last) -> iterator
        {
            while (first != last)
            {
                insert_after(pos, *first);
                first++;
                s++;
            }

            return iterator(pos.val->next);
        }

        auto insert_after(const_iterator pos, initializer_list<T> il) -> iterator { insert_after(pos, il.begin(), il.end()); }

        template <typename... Args>
        iterator emplace_after(const_iterator pos, Args&&... args)
        {
            s++;
            auto newval = pos.val;
            pos.val = new _data(forward(args)...);
            pos.val->next = newval;
            return iterator(pos.next().val);
        }

        iterator erase_after(const_iterator pos)
        {
            auto tmp = pos.val->next;
            if (pos.val->next)
                pos.val->next = pos.val->next->next;
            delete tmp;
        }

        iterator erase_after(const_iterator first, const_iterator last)
        {
            // TODO: implement
        }
    };
} // namespace std

#endif
