// vim: set ft=cpp:
#pragma once

namespace std
{
    namespace detail
    {
        template <typename T, T From, T To>
        constexpr auto range(T val) -> bool
        {
            return val >= From && val <= To;
        }
    } // namespace detail

    constexpr auto isblank(char ch) -> bool { return ch == ' ' || ch == '\t'; }
    constexpr auto iscntrl(char ch) -> bool { return detail::range<char, 0x00, 0x1f>(ch) || ch == 0x7F; }
    constexpr auto isdigit(char ch) -> bool { return detail::range<char, '0', '9'>(ch); }
    constexpr auto islower(char ch) -> bool { return detail::range<char, 'a', 'z'>(ch); }
    constexpr auto ispunct(char ch) -> bool
    {
        return detail::range<char, '!', '/'>(ch) || detail::range<char, ';', '@'>(ch) || detail::range<char, '[', '`'>(ch) ||
               detail::range<char, '{', '~'>(ch);
    }

    constexpr auto isspace(char ch) -> bool { return ch == ' ' || ch == '\t' || ch == '\n' || ch == '\v' || ch == '\f' || ch == '\r'; }

    constexpr bool isupper(char ch) { return detail::range<char, 'A', 'Z'>(ch); }
    constexpr bool isxdigit(char c)
    {
        return isdigit(c) || detail::range<char, 'a', 'f'>(c) || detail::range<char, 'A', 'F'>(c);
    }

    constexpr auto isalpha(char ch) -> bool { return isupper(ch) || islower(ch); }
    constexpr auto isalnum(char ch) -> bool { return isalpha(ch) || isdigit(ch); }
    constexpr auto isgraph(char ch) -> bool { return isalnum(ch) || ispunct(ch); }
    constexpr auto isprint(char ch) -> bool { return isgraph(ch) || isspace(ch); }

} // namespace std

