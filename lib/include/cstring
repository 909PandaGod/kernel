// vim: set ft=cpp:
#pragma once
#include "cstddef"

namespace std
{
    auto strcpy(char* __restrict dest, const char* __restrict src) -> char*;
    auto strncpy(char* __restrict dest, const char* __restrict src, size_t size) -> char*;

    auto strcat(char* __restrict dest, const char* __restrict src) -> char*;
    auto strncat(char* __restrict dest, const char* __restrict src, size_t size) -> char*;

    auto strxfrm(char* __restrict dest, const char* __restrict src, size_t size) -> size_t;

    [[gnu::malloc]] auto strdup(const char* str) -> char*;
    [[gnu::malloc]] auto strndup(const char* str, size_t size) -> char*;

    auto strlen(const char* str) -> size_t;

    auto strcmp(const char* str1, const char* str2) -> int;
    auto strncmp(const char* str1, const char* str2, size_t size) -> int;

    auto strcoll(const char* str1, const char* str2) -> int;

    auto strchr(char* str, int ch) -> char*;
    auto strchr(const char* str, int ch) -> const char*;

    auto strrchr(char* str, int ch) -> char*;
    auto strrchr(const char* str, int ch) -> const char*;

    auto strspn(const char* str, const char* accept) -> size_t;
    auto strcspn(const char* str, const char* reject) -> size_t;

    auto strpbrk(char* str, const char* accept) -> char*;
    auto strpbrk(const char* str, const char* accept) -> const char*;

    auto strstr(char* str, const char* target) -> char*;
    auto strstr(const char* str, const char* target) -> const char*;

    auto strtok(char* __restrict str, const char* __restrict delim) -> char*;

    auto memchr(void* buf, int ch, size_t size) -> void*;
    auto memchr(const void* buf, int ch, size_t size) -> const void*;

    auto memcmp(const void* str1, const void* str2, size_t size) -> int;
    auto memset(void* buf, int ch, size_t size) -> void*;
    auto memcpy(void* __restrict dest, const void* __restrict src, size_t size) -> void*;
    auto memccpy(void* __restrict dest, const void* __restrict src, int ch, size_t size) -> void*;
    auto memmove(void* dest, const void* src, size_t size) -> void*;
} // namespace std

